{"version":3,"sources":["logo.svg","Switch/index.js","Header/index.js","Logo/index.js","Main/index.js","Section/index.js","Form/index.js","Tasks/index.js","Footer/index.js","Buttons/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Switch","className","htmlFor","type","id","Header","body","title","Logo","altText","src","logo","alt","Main","children","Section","classModificator","Form","placeHolderText","autoFocus","placeholder","Tasks","tasks","hideDoneTasks","map","task","key","done","content","Footer","length","Buttons","undoneTasks","every","undefined","doneTasks","Fragment","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2c53194e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.808985cb.svg\";","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Switch = () => (\r\n  <aside className=\"switch__container\">\r\n    <label htmlFor=\"switch\" className=\"switch__label\">\r\n      Night Mode\r\n    </label>\r\n    <input className=\"switch\" type=\"checkbox\" id=\"switch\" />\r\n    <label className=\"switch__toggle\" htmlFor=\"switch\"></label>\r\n  </aside>\r\n);\r\n\r\nexport default Switch;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Header = ({ body, title }) => (\r\n    <header className=\"header\">\r\n        <section className=\"header__section\">\r\n            {body}\r\n            <h1 className=\"header__title\">{title}</h1>\r\n        </section>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport logo from '../logo.svg';\r\nimport \"./style.css\";\r\n\r\nconst Logo = ({ altText }) => (\r\n    <img\r\n        src={logo}\r\n        alt={altText}\r\n        className=\"logo\"\r\n    />\r\n);\r\n\r\nexport default Logo;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Main = ({children}) => (\r\n    <main className=\"main\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Main;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Section = ({ title, body, classModificator }) => (\r\n    <section className={`section${classModificator ? ` ${classModificator}` : \"\"}`}>\r\n        <h2 className=\"section__header\">{title}</h2>\r\n        {body}\r\n    </section>\r\n)\r\n\r\nexport default Section;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ placeHolderText }) => (\r\n    <form className=\"form\">\r\n        <input\r\n            type=\"text\"\r\n            className=\"form__input\"\r\n            autoFocus\r\n            placeholder={placeHolderText}\r\n        />\r\n        <button className=\"form__button form__button--addButton\">\r\n            submit\r\n            </button>\r\n    </form>\r\n);\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideDoneTasks }) => (\r\n    <ul className=\"task__list\">\r\n        {tasks.map((task) =>\r\n            <li key={task.id} className={`task__item ${\r\n                task.done && hideDoneTasks ? \"task__item--hidden\" : \"\"\r\n                }`}>\r\n                <button className={`task__button task__button--doneButton${\r\n                    task.done ? \" task__button--doneButtonToggled\" : \"\"\r\n                    }`}></button>\r\n                <p className={`task__paragraph ${\r\n                    task.done ? \"task__paragraph--done\" : \"\"\r\n                    }`}>\r\n                    {task.content}\r\n                </p>\r\n                <button className=\"task__button task__button--deleteButton\"></button>\r\n            </li >\r\n        )}\r\n    </ul >\r\n);\r\n\r\nexport default Tasks;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Footer = ({ tasks, children }) => (\r\n    <footer className=\"footer\">\r\n     {tasks.length > 0 && [children]}\r\n    </footer>\r\n    )     \r\n\r\nexport default Footer;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\n\r\n\r\nconst Buttons = ({ tasks, hideDoneTasks }) => {\r\n    const isTaskDone = ({ done }) => {\r\n        return done;\r\n    };\r\n    const isTaskUndone = ({ done }) => {\r\n        return !done || undefined;\r\n    };\r\n    const undoneTasks = tasks.every(isTaskUndone);\r\n    const doneTasks = tasks.every(isTaskDone);\r\n    if (tasks.length === 0) { return null; }\r\n    return (\r\n        <React.Fragment>\r\n            <button className=\"button button--doneAllButton\" disabled={doneTasks ? \"disabled\" : \"\"}>set all as done</button>\r\n            <button className=\"button button--hideDoneButton\" disabled={undoneTasks ? \"disabled\" : \"\"}>\r\n                {hideDoneTasks ? \"show\" : \"hide\"} done</button>\r\n            <button className=\"button button--removeAllButton\">remove all tasks</button>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import React from \"react\";\nimport Switch from './Switch';\nimport Header from './Header';\nimport Logo from \"./Logo\";\nimport Main from './Main';\nimport Section from './Section';\nimport Form from './Form';\nimport Tasks from './Tasks';\nimport Footer from './Footer';\nimport Buttons from './Buttons';\n\n\nconst tasks = [\n  { id: 1, content: \"Oglądnąć lekcje o React\", done: true },\n  { id: 2, content: \"Eksport To Do List do Reacta\", done: true },\n  { id: 3, content: \"Dodać interakcje\", done: false },\n];\nconst hideDoneTasks = false;\n\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Switch />\n      <Header title=\"TASKER\" body={<Logo altText=\"logotype\" />}>\n      </Header>\n      <Main>\n        <Section title=\"add new task\" body={<Form placeHolderText={\"write your task here\"} />} />\n        <Section title=\"task list\" body={<Tasks key={tasks} tasks={tasks} hideDoneTasks={hideDoneTasks} />} />\n      </Main>\n      <Footer tasks={tasks}>\n        <Section classModificator={\"section--footer\"} body={<Buttons tasks={tasks} hideDoneTasks={hideDoneTasks} />} />\n      </Footer>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}