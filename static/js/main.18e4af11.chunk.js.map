{"version":3,"sources":["App/common/Header/Logo/logo.svg","App/features/tasks/TasksList/checked.svg","App/features/tasks/TasksList/trash.svg","App/features/tasks/TasksList/pen.svg","App/features/tasks/tasksSlice.js","App/features/theme/themeSlice.js","App/store.js","App/common/Header/styled.js","App/common/Header/Logo/styled.js","App/common/Header/Logo/index.js","App/common/Header/index.js","App/common/Main/index.js","App/common/Section/styled.js","App/common/Section/index.js","App/features/tasks/Form/styled.js","App/features/tasks/useCurrentDate.js","App/features/tasks/Form/index.js","App/features/tasks/TasksList/styled.js","App/features/tasks/TasksList/EditForm/styled.js","App/features/tasks/TasksList/EditForm/index.js","App/features/tasks/TasksList/index.js","App/features/tasks/Footer/Buttons/styled.js","App/features/tasks/Footer/Buttons/index.js","App/features/tasks/Footer/styled.js","App/features/tasks/Footer/index.js","App/features/tasks/Tasks.js","App/features/theme/themes.js","App/features/theme/Globalstyle.js","App/common/Wrapper/styled.js","App/common/Wrapper/index.js","App/common/FlexContainer/styled.js","App/common/FlexContainer/index.js","App/features/theme/Switch/styled.js","App/features/theme/Switch/index.js","App/features/theme/Theme.js","App/App.js","App/serviceWorker.js","index.js"],"names":["module","exports","tasksSlice","createSlice","name","initialState","tasks","JSON","parse","localStorage","getItem","hideDone","reducers","addTask","payload","push","editTask","state","index","findIndex","task","id","removeTask","slice","removeAllTasks","toggleTaskDone","done","toggleAllTasksDone","map","toggleTaskEdit","edit","toggleHideDone","actions","selectTasks","themeSlice","theme","themeChange","selectTheme","configureStore","reducer","tasksReducer","themeReducer","HeaderContainer","styled","header","HeaderSection","section","colors","sectionBackground","sectionText","shadow","HeaderTitle","h1","breakpoints","phone","Image","img","svgImage","Logo","src","logo","alt","Header","title","Main","children","SectionContainer","SectionHeader","h2","Section","body","FormContainer","form","FormInput","input","FormButton","button","useCurrentDate","useState","Date","date","setDate","useEffect","intervalId","setInterval","clearInterval","Form","dispatch","useDispatch","newTaskContent","setNewTaskContent","inputRef","useRef","createDate","dateString","toLocaleDateString","day","month","timeString","toLocaleTimeString","onSubmit","event","preventDefault","newTaskContentTrimmed","trim","editDate","content","nanoid","current","focus","ref","type","autoFocus","placeholder","value","onChange","target","Statement","span","css","Paragraph","p","centered","DateParagraph","hidden","edited","List","ul","Item","li","Button","active","greenButton","checked","yellowButton","pen","remove","redButton","trash","div","tablet","EditFormInput","EditForm","editTaskContent","setEditTaskContent","editTaskContentTrimmed","TasksList","useSelector","setItem","stringify","length","Fragment","key","onClick","ButtonContainer","doneAll","removeAll","redButtonLighter","Buttons","disabled","every","FooterContainer","footer","Footer","Tasks","themes","light","background","switch","translate","desktop","dark","GlobalStyles","createGlobalStyle","MainWrapper","Wrapper","Container","FlexContainer","SwitchContainer","aside","Label","label","toggle","toggled","Switch","htmlFor","Theme","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.18e4af11.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.369e0d03.svg\";","module.exports = __webpack_public_path__ + \"static/media/checked.ecbb07b3.svg\";","module.exports = __webpack_public_path__ + \"static/media/trash.386f487d.svg\";","module.exports = __webpack_public_path__ + \"static/media/pen.0bfe9232.svg\";","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: JSON.parse(localStorage.getItem(\"tasks\")) || [],\r\n        hideDone: JSON.parse(localStorage.getItem(\"hideDone\")) || false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        editTask: (state, { payload }) => {\r\n            const index = state.tasks.findIndex(task => task.id === payload.id);\r\n            state.tasks[index] = payload;\r\n        },\r\n        removeTask: (state, { payload }) => {\r\n            const index = state.tasks.findIndex(task => task.id === payload);\r\n            state.tasks = [...state.tasks.slice(0, index), ...state.tasks.slice(index + 1)];\r\n        },\r\n        removeAllTasks: (state) => {\r\n            state.tasks = [];\r\n        },\r\n        toggleTaskDone: (state, { payload }) => {\r\n            const index = state.tasks.findIndex(task => task.id === payload)\r\n            state.tasks[index].done = !state.tasks[index].done;\r\n        },\r\n        toggleAllTasksDone: (state) => {\r\n            state.tasks = state.tasks.map((task) => ({ ...task, done: true }));\r\n        },\r\n        toggleTaskEdit: (state, { payload }) => {\r\n            const index = state.tasks.findIndex(task => task.id === payload)\r\n            state.tasks[index].edit = !state.tasks[index].edit;\r\n        },\r\n        toggleHideDone: (state) => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    editTask,\r\n    removeTask,\r\n    removeAllTasks,\r\n    toggleTaskDone,\r\n    toggleAllTasksDone,\r\n    toggleTaskEdit,\r\n    toggleHideDone,\r\n} = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst themeSlice = createSlice({\r\n    name: \"theme\",\r\n    initialState: {\r\n        theme: JSON.parse(localStorage.getItem(\"currentTheme\")) || \"light\",\r\n    },\r\n    reducers: {\r\n        themeChange: (state, { payload }) => {\r\n            if (payload === \"light\") {\r\n                state.theme = \"dark\"\r\n            }\r\n            else {\r\n                state.theme = \"light\"\r\n            };\r\n        }\r\n    },\r\n},\r\n);\r\n\r\nexport const { themeChange } = themeSlice.actions;\r\nexport const selectTheme = state => state.theme;\r\nexport default themeSlice.reducer;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport themeReducer from \"./features/theme/themeSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n        theme: themeReducer,\r\n    },\r\n});","import styled from \"styled-components\";\r\n\r\nexport const HeaderContainer = styled.header`\r\n    margin: 10px auto;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: flex-start;\r\n`;\r\n\r\nexport const HeaderSection = styled.section`\r\n    display: flex;\r\n    justify-content: center;\r\n    background-color: ${({ theme }) => theme.colors.sectionBackground};\r\n    color: ${({ theme }) => theme.colors.sectionText};\r\n    width: 100%;\r\n    padding: 20px;\r\n    box-shadow: 1px 1px 2px 1px ${({ theme }) => theme.colors.shadow};\r\n`;\r\n\r\nexport const HeaderTitle = styled.h1`\r\n    text-transform: capitalize;\r\n    color: ${({ theme }) => theme.colors.sectionText};\r\n    font-size: 40px;\r\n    text-align: center;   \r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.phone}) {\r\n        font-size: 30px;\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Image = styled.img`\r\n    align-self: center;\r\n    margin: 10px;\r\n    width: 70px;\r\n    filter: ${({ theme }) => theme.colors.svgImage};\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.phone}) {\r\n        max-width: 60%;\r\n    }\r\n`;","import React from 'react';\r\nimport { Image } from \"./styled\";\r\nimport logo from './logo.svg';\r\n\r\nconst Logo = () => (\r\n    <Image\r\n        src={logo}\r\n        alt=\"Logotype\"\r\n    />\r\n);\r\n\r\nexport default Logo;","import React from 'react';\r\nimport { HeaderContainer, HeaderSection, HeaderTitle } from \"./styled\";\r\nimport Logo from \"./Logo\";\r\n\r\nconst Header = ({ title }) => (\r\n    <HeaderContainer>\r\n        <HeaderSection>\r\n            <Logo />\r\n            <HeaderTitle>{title}</HeaderTitle>\r\n        </HeaderSection>\r\n    </HeaderContainer>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Main = ({ children }) => (\r\n    <main>\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Main;","import styled from \"styled-components\";\r\n\r\nexport const SectionContainer = styled.section`\r\n    background-color: ${({ theme }) => theme.colors.sectionBackground};\r\n    color: ${({ theme }) => theme.colors.sectionText};\r\n    width: 100%;\r\n    padding: 20px;\r\n    margin: 10px 0px;\r\n    box-shadow: 1px 1px 2px 1px ${({ theme }) => theme.colors.shadow};\r\n`;\r\nexport const SectionHeader = styled.h2`\r\n    text-transform: uppercase;\r\n    font-size: 20px;\r\n    padding-bottom: 10px;\r\n    border-bottom: 2px solid;\r\n    border-color: ${({ theme }) => theme.colors.sectionText};\r\n`;","import React from 'react';\r\nimport { SectionContainer, SectionHeader } from \"./styled\";\r\n\r\nconst Section = ({ title, body }) => (\r\n    <SectionContainer>\r\n        {\r\n            title && <SectionHeader>{title}</SectionHeader>\r\n        }\r\n        {body}\r\n    </SectionContainer>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const FormContainer = styled.form`\r\n    display: flex;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.phone}) {\r\n            flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const FormInput = styled.input`\r\n        width: 100%;\r\n        padding: 10px 20px;\r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n    text-transform: uppercase;\r\n    cursor: pointer;\r\n    border: none;\r\n    min-width: max-content;\r\n    background-color: ${({ theme }) => theme.colors.sectionText};\r\n    color: ${({ theme }) => theme.colors.sectionBackground};\r\n    letter-spacing: 1px;\r\n    padding: 10px 10px;\r\n    margin-left: 10px;\r\n    transition: color 0.4s, transform 0.1s, background-color 0.4s;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.phone}) {\r\n        margin-top: 10px;\r\n        margin-left: 0px;\r\n    }\r\n\r\n    &:hover {\r\n        background-color: ${({ theme }) => theme.colors.sectionBackground};\r\n        color: ${({ theme }) => theme.colors.sectionText};\r\n        border: 1px solid ${({ theme }) => theme.colors.sectionText};\r\n        font-weight: bold;\r\n        padding-left: 7px;\r\n    }\r\n    &:active {\r\n        border: 1px solid ${({ theme }) => theme.colors.sectionText};\r\n        transform: scale(0.9);\r\n    }\r\n`;","import { useState, useEffect } from \"react\";\r\n\r\nexport const useCurrentDate = () => {\r\n\r\n    const [date, setDate] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => {\r\n            setDate(new Date());\r\n        }, 1000);\r\n\r\n        return () => {\r\n            clearInterval(intervalId);\r\n        };\r\n    }, []);\r\n\r\n    return date;\r\n};","import React, { useState, useRef } from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { FormContainer, FormInput, FormButton } from \"./styled\";\r\nimport { useCurrentDate } from \"../useCurrentDate\";\r\n\r\nconst Form = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef();\r\n    const date = useCurrentDate();\r\n\r\n    const focus = () => {\r\n        inputRef.current.focus();\r\n    };\r\n  \r\n    const createDate = (date) => {\r\n        const dateString = date.toLocaleDateString(\r\n            \"en-EN\", {\r\n            day: \"numeric\",\r\n            month: \"long\"\r\n        });\r\n        const timeString = date.toLocaleTimeString();\r\n        return `Created at ${timeString} on ${dateString}`\r\n    };\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const newTaskContentTrimmed = newTaskContent.trim();\r\n        if (!newTaskContentTrimmed) {\r\n            return\r\n        }\r\n        event.preventDefault();\r\n        dispatch(addTask({\r\n            date: createDate(date),\r\n            editDate: null,\r\n            content: newTaskContentTrimmed,\r\n            done: false,\r\n            edit: false,\r\n            id: nanoid(),\r\n        }));\r\n        setNewTaskContent(\"\");\r\n        focus();\r\n    };\r\n\r\n    return (\r\n        <FormContainer onSubmit={onFormSubmit}>\r\n            <FormInput\r\n                ref={inputRef}\r\n                type=\"text\"\r\n                autoFocus\r\n                placeholder=\"write your task here\"\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <FormButton>\r\n                submit\r\n            </FormButton>\r\n        </FormContainer>\r\n    );\r\n};\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\nimport checked from \"./checked.svg\";\r\nimport trash from \"./trash.svg\";\r\nimport pen from \"./pen.svg\";\r\n\r\nexport const Statement = styled.span`\r\n    font-weight: 400;\r\n    font-size: 14px;\r\n    font-style: italic;\r\n\r\n    ${({ content }) => content && css`\r\n        &::after {\r\n            content: \"Done tasks are hidden\";\r\n        }\r\n    `}\r\n`;\r\n\r\nexport const Paragraph = styled.p`\r\n    font-weight: 400;\r\n    max-width: 100%;\r\n    text-align: justify;\r\n    flex-grow: 1;\r\n    font-size: 20px;\r\n    overflow-wrap: break-word;\r\n    word-wrap: break-word;\r\n    margin: 5px 0px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.phone}) {\r\n        font-size: 16px;\r\n    }\r\n\r\n    ${({ centered }) => centered && css`\r\n        text-align: center;\r\n        font-style: italic;\r\n    `}\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n        font-style: italic;\r\n    `}\r\n`;\r\n\r\nexport const DateParagraph = styled.p`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    font-weight: 400;\r\n    max-width: 100%;\r\n    flex-grow: 1;\r\n    font-size: 13px;\r\n    margin: 5px 0px;\r\n    padding-bottom: 5px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.colors.sectionText};   \r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n    \r\n    @media (max-width: ${({ theme }) => theme.breakpoints.phone}) {\r\n        font-size: 12px;\r\n    }\r\n`;\r\n\r\nexport const Date = styled.span`\r\n    ${({ edited }) => edited && css`\r\n        text-align: right;\r\n        font-style: italic;\r\n    `}\r\n    \r\n`;\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    padding-left: 0px;\r\n    background-color: ${({ theme }) => theme.colors.sectionBackground};    \r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n  \r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    text-transform: uppercase;\r\n    cursor: pointer;\r\n    border: none;\r\n    min-width: 30px;\r\n    min-height: 30px;\r\n    transition: color 0.4s;\r\n    transition: transform 0.1s;\r\n    border-radius: 5px;\r\n    background-position: center;\r\n    transition: background-color 0.4s;\r\n    background-repeat: no-repeat;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.phone}) {\r\n        min-width: 25px;\r\n        min-height: 25px;\r\n    }\r\n    \r\n    ${({ active }) => active && css`\r\n        background-color: ${({ theme }) => theme.colors.greenButton};\r\n        margin-right: 15px;\r\n        transition: 0.2s;\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            transform: scale(0.85);\r\n            filter: brightness(120%);\r\n        }\r\n    `}\r\n\r\n    ${({ done }) => done && css`\r\n        background-image: url(${checked});\r\n        background-size: 75%;\r\n    `}\r\n\r\n    ${({ edit }) => edit && css`\r\n        background-color: ${({ theme }) => theme.colors.yellowButton};\r\n        background-image: url(${pen});\r\n        background-size: 75%;\r\n        margin-left: 15px;\r\n        transition: 0.2s;\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            transform: scale(0.85);\r\n            filter: brightness(120%);\r\n        }\r\n    `}\r\n    \r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.colors.redButton};\r\n        background-image: url(${trash});\r\n        background-size: 85%;\r\n        margin-left: 15px;\r\n        transition: 0.2s;\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            transform: scale(0.85);\r\n            filter: brightness(120%);\r\n        }\r\n    `}\r\n\r\n`;","import styled, { css } from \"styled-components\";\r\n\r\nexport const FormContainer = styled.div`\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    \r\n    @media (max-width: ${({ theme }) => theme.breakpoints.tablet}) {\r\n        flex-wrap: wrap;\r\n    }\r\n`;\r\n\r\nexport const EditFormInput = styled.input`\r\n    width: 100%;\r\n    padding: 5px 20px; \r\n    display: none;\r\n\r\n    ${({ edit }) => edit && css`\r\n        display: unset;\r\n    `}   \r\n`;\r\n\r\nexport const Button = styled.button`\r\n    text-transform: uppercase;\r\n    cursor: pointer;\r\n    border: none;\r\n    min-width: max-content;\r\n    background-color: ${({ theme }) => theme.colors.sectionText};\r\n    color: ${({ theme }) => theme.colors.sectionBackground};\r\n    letter-spacing: 1px;\r\n    padding: 5px 10px;\r\n    margin-left: 10px;\r\n    transition: color 0.4s, transform 0.1s, background-color 0.4s;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.tablet}) {\r\n        margin-top: 10px;\r\n        margin-left: 0px;\r\n    }\r\n\r\n    &:hover {\r\n        background-color: ${({ theme }) => theme.colors.sectionBackground};\r\n        color: ${({ theme }) => theme.colors.sectionText};\r\n        border: 1px solid ${({ theme }) => theme.colors.sectionText};\r\n        font-weight: bold;\r\n        padding-left: 7px;\r\n    }\r\n    &:active {\r\n        border: 1px solid ${({ theme }) => theme.colors.sectionText};\r\n        transform: scale(0.9);\r\n    }\r\n`;","import React, { useState } from 'react';\r\nimport { EditFormInput, Button, FormContainer } from \"./styled\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { editTask } from \"../../tasksSlice\";\r\nimport { useCurrentDate } from \"../../useCurrentDate\";\r\n\r\nconst EditForm = ({ task }) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [editTaskContent, setEditTaskContent] = useState(task.content);\r\n    const date = useCurrentDate();\r\n    \r\n    const editDate = (date) => {\r\n        const dateString = date.toLocaleDateString(\r\n            \"en-EN\", {\r\n            day: \"numeric\",\r\n            month: \"long\"\r\n        });\r\n        const timeString = date.toLocaleTimeString();\r\n        return `(edited at ${timeString} on ${dateString})`\r\n    };\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const editTaskContentTrimmed = editTaskContent.trim();\r\n        if (editTaskContentTrimmed !== task.content) {\r\n            dispatch(editTask({\r\n                ...task,\r\n                content: editTaskContentTrimmed,\r\n                edit: false,\r\n                editDate: editDate(date),\r\n            }));\r\n        }\r\n        else {\r\n            dispatch(editTask({\r\n                ...task,\r\n                edit: false,\r\n            }));\r\n        };\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={onFormSubmit}>\r\n            <FormContainer>\r\n                <EditFormInput\r\n                    edit={task.edit}\r\n                    value={editTaskContent}\r\n                    type=\"text\"\r\n                    autoFocus\r\n                    onChange={({ target }) => setEditTaskContent(target.value)}\r\n                />\r\n                <Button>\r\n                    submit\r\n            </Button>\r\n            </FormContainer>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default EditForm;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleTaskEdit, removeTask, toggleTaskDone } from \"../tasksSlice\";\r\nimport {\r\n    Paragraph,\r\n    List,\r\n    Item,\r\n    Statement,\r\n    Button,\r\n    DateParagraph,\r\n    Date\r\n} from \"./styled\";\r\nimport EditForm from \"./EditForm\";\r\n\r\nconst TasksList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"tasks\",\r\n            JSON.stringify(tasks));\r\n        localStorage.setItem(\"hideDone\",\r\n            JSON.stringify(hideDone));\r\n    }, [tasks, hideDone]);\r\n\r\n    if (!tasks.length) {\r\n        return (\r\n            <Paragraph centered>\r\n                There are currently no tasks to display\r\n            </Paragraph>\r\n        )\r\n    }\r\n    else return (\r\n        <List>\r\n            <Statement\r\n                content={hideDone || \"\"}\r\n            >\r\n            </Statement>\r\n            {tasks.map((task) =>\r\n                <React.Fragment key={task.id}>\r\n                    <Item hidden={task.done && hideDone}>\r\n                        <Button\r\n                            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                            active\r\n                            done={task.done}\r\n                        />\r\n                        <Paragraph done={task.done}>\r\n                            {task.edit\r\n                                ? <EditForm\r\n                                    task={task}\r\n                                />\r\n                                : task.content}\r\n                        </Paragraph>\r\n                        <Button\r\n                            edit\r\n                            onClick={() => dispatch(toggleTaskEdit(task.id))}\r\n                        />\r\n                        <Button\r\n                            onClick={() => dispatch(removeTask(task.id))}\r\n                            remove\r\n                        />\r\n                    </Item >\r\n                    <DateParagraph hidden={task.done && hideDone}>\r\n                        <Date>{task.date}</Date>\r\n                        <Date edited>{task.editDate}</Date>\r\n                    </DateParagraph>\r\n                </React.Fragment>\r\n            )}\r\n        </List >\r\n    );\r\n};\r\n\r\nexport default TasksList;","import styled, { css } from \"styled-components\";\r\n\r\nexport const ButtonContainer = styled.div`\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    flex-wrap: wrap;\r\n`;\r\n    \r\nexport const Button = styled.button`\r\n    text-transform: uppercase;\r\n    cursor: pointer;\r\n    border: none;\r\n    padding: 10px 20px;\r\n    color: #ffffff;\r\n    font-weight: bold;\r\n    letter-spacing: 1px;\r\n    margin: 10px;\r\n    transition: color 0.4s;\r\n    transition: transform 0.1s;\r\n    transition: background-color 0.4s;\r\n\r\n    ${({ doneAll }) => doneAll && css`\r\n        background-color: ${({ theme }) => theme.colors.greenButton};\r\n        border-radius: 5px;\r\n        transition: 0.5s;\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        \r\n        &:active {\r\n            transform: scale(0.9);\r\n            filter: brightness(120%);\r\n        }\r\n        &:disabled {\r\n            background-color: #ccc;\r\n            filter: brightness(100%);\r\n            cursor: default;\r\n        }\r\n    `}\r\n\r\n    ${({ hideDone }) => hideDone && css`\r\n            background-color: ${({ theme }) => theme.colors.greenButton};\r\n            border-radius: 5px;\r\n            transition: 0.3s;\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        \r\n        &:active {\r\n            transform: scale(0.9);\r\n            filter: brightness(120%);\r\n        }\r\n        &:disabled {\r\n            background-color: #ccc;\r\n            filter: brightness(100%);\r\n            cursor: default;\r\n        }\r\n    `}\r\n\r\n    ${({ removeAll }) => removeAll && css`\r\n            background-color: ${({ theme }) => theme.colors.redButton};\r\n            border-radius: 5px;\r\n            transition: 0.3s;\r\n\r\n        &:hover {\r\n            background-color: ${({ theme }) => theme.colors.redButtonLighter};\r\n        }\r\n        \r\n        &:active {\r\n            transform: scale(0.9);\r\n        }\r\n    `}\r\n`;","import React from 'react';\r\nimport { ButtonContainer, Button } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { toggleAllTasksDone, selectTasks, removeAllTasks, toggleHideDone } from \"../../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        tasks.length > 0 && (\r\n            <ButtonContainer>\r\n                <Button\r\n                    onClick={() => dispatch(toggleAllTasksDone())}\r\n                    doneAll\r\n                    disabled={tasks.every(({ done }) => done)}>\r\n                    set all as done\r\n                </Button>\r\n                <Button\r\n                    onClick={() => dispatch(toggleHideDone())}\r\n                    hideDone\r\n                    disabled={tasks.every(({ done }) => !done)}>\r\n                    {hideDone ? \"show\" : \"hide\"} done\r\n                </Button>\r\n                <Button\r\n                    onClick={() => dispatch(removeAllTasks())}\r\n                    removeAll>\r\n                    remove all tasks\r\n                </Button>\r\n            </ButtonContainer>\r\n        )\r\n    );\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const FooterContainer = styled.footer`\r\n    margin: 10px auto;\r\n`;","import React from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectTasks } from \"../tasksSlice\";\r\nimport Buttons from './Buttons';\r\nimport Section from '../../../common/Section';\r\nimport { FooterContainer } from \"./styled\";\r\n\r\nconst Footer = () => {\r\n\r\n    const { tasks } = useSelector(selectTasks);\r\n\r\n    return (\r\n        <FooterContainer>\r\n            {tasks.length > 0 && (\r\n                <Section\r\n                    body={<Buttons\r\n                        tasks={tasks}\r\n                    />}\r\n                />\r\n            )}\r\n        </FooterContainer>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport Header from '../../common/Header';\r\nimport Main from '../../common/Main';\r\nimport Section from '../../common/Section';\r\nimport Form from './Form';\r\nimport TasksList from './TasksList';\r\nimport Footer from './Footer';\r\n\r\nfunction Tasks() {\r\n\r\n    return (\r\n        <>\r\n            <Header title=\"TASKER\" />\r\n            <Main>\r\n                <Section\r\n                    title=\"add new task\"\r\n                    body={<Form />}\r\n                />\r\n                <Section\r\n                    title=\"task list\"\r\n                    body={<TasksList />}\r\n                />\r\n            </Main>\r\n            <Footer\r\n\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Tasks;\r\n","export const themes = {\r\n    light: {\r\n        colors: {\r\n            background: \"#c4bb91\",\r\n            sectionBackground: \"#fff\",\r\n            sectionText: \"#141414\",\r\n            shadow: \"#555\",\r\n            greenButton: \"rgb(0, 172, 29)\",\r\n            redButton: \"rgb(172, 0, 0)\",\r\n            yellowButton: \"rgb(227, 204, 52)\",\r\n            switch: \"hsl(0, 0%, 100%)\",\r\n            svgImage: \"brightness(100%) invert(0%)\",\r\n            translate: \"translatex(130%)\",\r\n        },\r\n\r\n        breakpoints: {\r\n            phone: \"375px\",\r\n            tablet: \"768px\",\r\n            desktop: \"1200px\",\r\n\r\n        },\r\n    },\r\n\r\n    dark: {\r\n        colors: {\r\n            background: \"#1a1a1a\",\r\n            sectionBackground: \"#2a3a41\",\r\n            sectionText: \"rgb(255, 255, 255)\",\r\n            shadow: \"rgb(156, 156, 156)\",\r\n            greenButton: \"rgb(0, 172, 29)\",\r\n            redButton: \"rgb(172, 0, 0)\",\r\n            yellowButton: \"rgb(227, 204, 52)\",\r\n            switch: \"#2a3a41\",\r\n            svgImage: \"brightness(0%) invert(100%)\",\r\n            translate: \"translatex(0%)\",\r\n        },\r\n\r\n        breakpoints: {\r\n            phone: \"375px\",\r\n            tablet: \"768px\",\r\n            desktop: \"1200px\",\r\n        },\r\n    },\r\n};","import { createGlobalStyle } from \"styled-components\"\r\nexport const GlobalStyles = createGlobalStyle`\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n  *, ::after, ::before {\r\n    box-sizing: inherit;\r\n  }\r\n  body {\r\n    background: ${({ theme }) => theme.colors.background};\r\n    font-family: \"Roboto Condensed\", sans-serif;\r\n    transition: all 0.3s linear;\r\n    margin: 10px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.phone}) {\r\n        font-size: 15px;\r\n    }\r\n  }\r\n  `","import styled from \"styled-components\";\r\n\r\nexport const MainWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-height: 100vh;\r\n`;","import React from 'react';\r\nimport { MainWrapper } from \"./styled\";\r\n\r\nconst Wrapper = ({ children }) => (\r\n    <MainWrapper>\r\n        {children}\r\n    </MainWrapper>\r\n);\r\n\r\nexport default Wrapper;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n        max-width: 800px;\r\n        width: 100%;\r\n    `;","import React from 'react';\r\nimport { Container } from \"./styled\";\r\n\r\nconst FlexContainer = ({ children }) => (\r\n    <Container>\r\n        {children}\r\n    </Container>\r\n\r\n);\r\n\r\nexport default FlexContainer;","import styled, { css } from \"styled-components\";\r\n\r\nexport const SwitchContainer = styled.aside`\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    margin: 10px auto;\r\n    max-width: 800px;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n    font-weight: 700;\r\n    color: ${({ theme }) => theme.colors.sectionText};\r\n    margin-left: 10px;\r\n\r\n    ${({ toggle }) => toggle && css`\r\n        position: relative;\r\n        display: block;\r\n        padding: 5px 10px;\r\n        width: 65px;\r\n        background-color: ${({ theme }) => theme.colors.switch};\r\n        background-image: ${({ theme }) => theme.colors.switch};\r\n        transition: all 0.5s;\r\n        cursor: pointer;\r\n        box-shadow: 1px 1px 2px 1px ${({ theme }) => theme.colors.shadow};\r\n\r\n        &::after {\r\n            content: \"\";\r\n            display: block;\r\n            height: 20px;\r\n            width: 20px;\r\n            background-color: ${({ theme }) => theme.colors.background};\r\n            border: 1px solid ${({ theme }) => theme.colors.sectionText};\r\n            transition: all 0.3s;\r\n            transform: ${({ theme }) => theme.colors.translate};;\r\n        }\r\n\r\n        &:hover {\r\n            background-image: linear-gradient(to right, #2a3a41, #c4bb91);\r\n        }\r\n    `}\r\n\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    display: none;\r\n\r\n    ${({ toggled }) => toggled && css`   \r\n        +Label::after {\r\n            transform: ${({ theme }) => theme.colors.translate};;\r\n        }\r\n    `}\r\n`;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { themeChange, selectTheme } from \"../themeSlice\";\r\nimport { SwitchContainer, Label, Button } from \"./styled\";\r\n\r\nconst Switch = () => {\r\n\r\n  const { theme } = useSelector(selectTheme);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n\r\n    <SwitchContainer>\r\n      <Label htmlFor=\"switch\">\r\n        Night Mode\r\n       </Label>\r\n      <Button\r\n        id=\"switch\"\r\n        onClick={() => dispatch(themeChange(theme))}\r\n      />\r\n      <Label toggle htmlFor=\"switch\"></Label>\r\n    </SwitchContainer>\r\n\r\n  );\r\n};\r\n\r\nexport default Switch;","import React, { useEffect } from \"react\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { themes } from \"./themes\";\r\nimport { GlobalStyles } from \"./Globalstyle\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectTheme } from \"./themeSlice\"\r\nimport Wrapper from '../../common/Wrapper';\r\nimport FlexContainer from '../../common/FlexContainer';\r\nimport Switch from \"./Switch\";\r\n\r\nfunction Theme({ body }) {\r\n\r\n    const { theme } = useSelector(selectTheme);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"currentTheme\",\r\n            JSON.stringify(theme));\r\n    }, [theme]);\r\n\r\n    return (\r\n        <ThemeProvider theme={theme === \"light\" ? themes.light : themes.dark}>\r\n            <GlobalStyles />\r\n            <Wrapper>\r\n                <FlexContainer>\r\n                    <Switch />\r\n                    {body}\r\n                </FlexContainer>\r\n            </Wrapper>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\nexport default Theme;\r\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\nimport Theme from \"./features/theme/Theme\";\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <Theme body={<Tasks />} />\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from \"./App/store\";\r\nimport App from './App/App';\r\nimport * as serviceWorker from './App/serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}