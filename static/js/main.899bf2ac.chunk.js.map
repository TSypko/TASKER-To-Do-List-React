{"version":3,"sources":["App/logo.svg","App/Wrapper/index.js","App/Wrapper/FlexContainer/index.js","App/Switch/index.js","App/Logo/index.js","App/Header/index.js","App/Main/index.js","App/Section/index.js","App/Form/index.js","App/Tasks/index.js","App/Footer/Buttons/index.js","App/Footer/index.js","App/App.js","App/serviceWorker.js","index.js"],"names":["module","exports","Wrapper","children","theme","className","FlexContainer","Switch","value","state","event","htmlFor","id","onClick","Logo","src","logo","alt","Header","body","title","Main","Section","sectionType","Form","addTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","preventDefault","newTaskContentTrimmed","trim","ref","type","autoFocus","placeholder","onChange","target","current","focus","Tasks","tasks","hideDone","removeTask","toggleTaskDone","length","map","task","key","done","content","Buttons","toggleHideDone","setAllDone","removeAllTasks","disabled","every","undefined","Footer","App","savedTasks","JSON","parse","localStorage","getItem","setTasks","useEffect","setItem","stringify","setHideDone","setTheme","buttonState","setButtonState","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.899bf2ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.808985cb.svg\";","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Wrapper = ({children, theme}) => (\r\n    <div className={`wrapper wrapper--${theme}`}>\r\n        {children}\r\n    </div>\r\n)\r\n\r\nexport default Wrapper;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst FlexContainer = ({ children }) => (\r\n    <div className=\"flexContainer\">\r\n        {children}\r\n    </div>\r\n\r\n);\r\n\r\nexport default FlexContainer;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Switch = ({value, state, event}) => (\r\n\r\n    <aside className=\"switch\">\r\n      <label htmlFor=\"switch\" className=\"switch__label\">\r\n        Night Mode\r\n    </label>\r\n      <button\r\n        className={state}\r\n        id=\"switch\"\r\n        value={value}\r\n        onClick={event}\r\n      />\r\n      <label className=\"switch__toggle\" htmlFor=\"switch\"></label>\r\n    </aside>\r\n  );\r\n\r\nexport default Switch;","import React from 'react';\r\nimport logo from '../logo.svg';\r\nimport \"./style.css\";\r\n\r\nconst Logo = () => (\r\n    <img\r\n        src={logo}\r\n        alt=\"Logotype\"\r\n        className=\"logo\"\r\n    />\r\n);\r\n\r\nexport default Logo;","import React from 'react';\r\nimport \"./style.css\";\r\nimport Logo from \"../Logo\";\r\n\r\nconst Header = ({ body, title }) => (\r\n    <header className=\"header\">\r\n        <section className=\"header__section\">\r\n           <Logo />\r\n            <h1 className=\"header__title\">{title}</h1>\r\n        </section>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Main = ({children}) => (\r\n    <main className=\"main\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Main;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Section = ({ title, body, sectionType }) => (\r\n    <section className={`section${sectionType ? ` ${sectionType}` : \"\"}`}>\r\n        <h2 className=\"section__header\">{title}</h2>\r\n        {body}\r\n    </section>\r\n)\r\n\r\nexport default Section;","import React, { useState, useRef } from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addTask }) => {\r\n\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef();\r\n\r\n    const focus = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const newTaskContentTrimmed = newTaskContent.trim();\r\n        if (!newTaskContentTrimmed) {\r\n            return\r\n        }\r\n        event.preventDefault();\r\n        addTask(newTaskContentTrimmed);\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={onFormSubmit}>\r\n            <input\r\n                ref={inputRef}\r\n                type=\"text\"\r\n                className=\"form__input\"\r\n                autoFocus\r\n                placeholder=\"write your task here\"\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <button\r\n                className=\"form__button\"\r\n                onClick={focus}\r\n            >\r\n                submit\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => {\r\n    if (!tasks.length) {\r\n        return (\r\n            <p className=\"tasks__paragraph tasks__paragraph--centered\">\r\n                There are currently no tasks to display\r\n            </p>\r\n        )\r\n    }\r\n    else return (\r\n        <ul className=\"tasks__list\">\r\n            {tasks.map((task) =>\r\n                <li key={task.id} className={`tasks__item ${\r\n                    task.done && hideDone ? \"tasks__item--hidden\" : \"\"\r\n                    }`}>\r\n                    <button onClick={() => toggleTaskDone(task.id)}\r\n                        className={`tasks__button tasks__button--doneButton${\r\n                            task.done ? \" tasks__button--doneButtonToggled\" : \"\"\r\n                            }`}></button>\r\n                    <p className={`tasks__paragraph ${\r\n                        task.done ? \"tasks__paragraph--done\" : \"\"\r\n                        }`}>\r\n                        {task.content}\r\n                    </p>\r\n                    <button onClick={() => removeTask(task.id)}\r\n                        className=\"tasks__button tasks__button--deleteButton\"></button>\r\n                </li >\r\n            )}\r\n        </ul >\r\n    )\r\n};\r\n\r\nexport default Tasks;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone, removeAllTasks }) => (\r\n    tasks.length > 0 && (\r\n        <>\r\n            <button\r\n                onClick={setAllDone}\r\n                className=\"button button--doneAllButton\"\r\n                disabled={tasks.every(({ done }) => done)}>\r\n                set all as done\r\n                </button>\r\n            <button\r\n                onClick={toggleHideDone}\r\n                className=\"button button--hideDoneButton\"\r\n                disabled={tasks.every(({ done }) => !done || undefined)}>\r\n                {hideDone ? \"show\" : \"hide\"}\r\n                 done\r\n                 </button>\r\n            <button\r\n                onClick={removeAllTasks}\r\n                className=\"button button--removeAllButton\">\r\n                remove all tasks\r\n                 </button>\r\n        </>\r\n    )\r\n);\r\n\r\nexport default Buttons;","import React from 'react';\r\nimport Buttons from './Buttons';\r\nimport Section from '../Section';\r\nimport \"./style.css\";\r\n\r\nconst Footer = ({ tasks, hideDone, toggleHideDone, setAllDone, removeAllTasks }) => (\r\n    <footer className=\"footer\">\r\n        {tasks.length > 0 && (\r\n            <Section\r\n                sectionType={\"section--footer\"}\r\n                body={<Buttons\r\n                    tasks={tasks}\r\n                    hideDone={hideDone}\r\n                    toggleHideDone={toggleHideDone}\r\n                    setAllDone={setAllDone}\r\n                    removeAllTasks={removeAllTasks}\r\n                />}\r\n            />\r\n        )}\r\n    </footer>\r\n)\r\n\r\nexport default Footer;","import React, { useState, useEffect } from \"react\";\nimport Wrapper from './Wrapper';\nimport FlexContainer from './Wrapper/FlexContainer';\nimport Switch from './Switch';\nimport Header from './Header';\nimport Main from './Main';\nimport Section from './Section';\nimport Form from './Form';\nimport Tasks from './Tasks';\nimport Footer from './Footer';\n\nfunction App() {\n\n  const savedTasks = JSON.parse(localStorage.getItem(\"tasks\"));\n\n  const [tasks, setTasks] = useState(\n    savedTasks\n      ? savedTasks\n      : []\n  );\n\n  useEffect(() => localStorage.setItem(\"tasks\", JSON.stringify(tasks)), [tasks]);\n\n  const [hideDone, setHideDone] = useState(false);\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const addTask = (newTaskContent) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n        content: newTaskContent,\n        done: false\n      }\n    ]\n    );\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      };\n      return task;\n    }))\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({ ...task, done: true })));\n  };\n\n  const removeAllTasks = () => {\n    setTasks([]);\n  };\n\n  const [theme, setTheme] = useState(\n    localStorage.getItem(\"theme\")\n      ? localStorage.getItem(\"theme\")\n      : \"\"\n  );\n\n  const [buttonState, setButtonState] = useState(\n    localStorage.getItem(\"button\")\n      ? localStorage.getItem(\"button\")\n      : \"switch__button\"\n  )\n\n  const themeChange = () => {\n    if (!theme) {\n      setTheme(\"dark\")\n      setButtonState(\"switch__button switch__button-toggled\");\n\n    } else {\n      setTheme(\"\")\n      setButtonState(\"switch__button\");\n    }\n  };\n\n  useEffect(() => localStorage.setItem(\"theme\", (theme)), [theme]);\n  useEffect(() => localStorage.setItem(\"button\", (buttonState)), [buttonState]);\n\n  return (\n    <Wrapper theme={theme}>\n      <FlexContainer>\n        <Switch\n          value={theme}\n          state={buttonState}\n          event={themeChange}\n        />\n        <Header title=\"TASKER\" />\n        <Main>\n          <Section\n            title=\"add new task\"\n            body={\n              <Form addTask={addTask} />\n            }\n          />\n          <Section\n            title=\"task list\"\n            body={\n              <Tasks\n                tasks={tasks}\n                hideDone={hideDone}\n                removeTask={removeTask}\n                toggleTaskDone={toggleTaskDone}\n              />\n            }\n          />\n        </Main>\n        <Footer\n          tasks={tasks}\n          hideDone={hideDone}\n          toggleHideDone={toggleHideDone}\n          setAllDone={setAllDone}\n          removeAllTasks={removeAllTasks}\n        />\n      </FlexContainer>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './App/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}