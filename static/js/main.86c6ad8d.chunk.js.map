{"version":3,"sources":["App/features/tasks/TasksPage/TasksList/checked.svg","App/features/tasks/TasksPage/TasksList/trash.svg","App/features/tasks/TasksPage/TasksList/pen.svg","App/common/Header/Logo/logo.svg","App/features/itemLocalStorage.js","App/features/tasks/tasksSlice.js","App/features/theme/themeSlice.js","App/features/tasks/getExampleTasks.js","App/features/tasks/tasksSaga.js","App/features/theme/themeSaga.js","App/features/rootSaga.js","App/store.js","App/common/Main/index.js","App/common/Section/styled.js","App/common/Section/index.js","App/features/tasks/TasksPage/Form/styled.js","App/features/tasks/useCurrentDate.js","App/features/tasks/TasksPage/SubmitButton/index.js","App/features/tasks/TasksPage/FormInput/index.js","App/features/tasks/TasksPage/Button/index.js","App/features/tasks/TasksPage/ButtonContainer/index.js","App/features/tasks/TasksPage/Form/index.js","App/features/tasks/queryParameters.js","App/features/tasks/TasksPage/TasksList/styled.js","App/features/tasks/TasksPage/TasksList/EditForm/styled.js","App/features/tasks/TasksPage/TasksList/EditForm/index.js","App/features/tasks/TasksPage/TasksList/index.js","App/features/tasks/searchQueryParamName.js","App/features/tasks/TasksPage/Footer/Buttons/index.js","App/features/tasks/TasksPage/Footer/styled.js","App/features/tasks/TasksPage/Footer/index.js","App/features/tasks/TasksPage/Search/index.js","App/features/tasks/TasksPage/index.js","App/features/tasks/TaskPage/styled.js","App/features/tasks/TaskPage/index.js","App/common/Header/styled.js","App/common/Header/Logo/styled.js","App/common/Header/Logo/index.js","App/common/Header/index.js","App/features/theme/Switch/styled.js","App/features/theme/Switch/index.js","App/features/theme/Theme.js","App/features/theme/GlobalStyles.js","App/features/theme/themes.js","App/common/Wrapper/styled.js","App/common/Wrapper/index.js","App/common/FlexContainer/styled.js","App/common/FlexContainer/index.js","App/common/Menu/styled.js","App/common/Menu/index.js","App/features/about/AboutPage/index.js","App/App.js","App/serviceWorker.js","index.js"],"names":["module","exports","saveItemToLocalStorage","key","value","localStorage","setItem","JSON","stringify","getItemFromLocalStorage","parse","getItem","tasksSlice","createSlice","name","initialState","tasks","hideDone","loading","reducers","addTask","payload","push","editTask","state","index","findIndex","task","id","removeTask","splice","removeAllTasks","toggleTaskDone","done","toggleAllTasksDone","map","toggleHideDone","fetchExampleTasks","setExampleTasks","actions","selectTasks","selectTasksStateOnly","themeSlice","theme","themeChange","selectTheme","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksToLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","saveThemeToLocalStorageHandler","themeSaga","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","themeReducer","middleware","run","Main","children","SectionContainer","styled","section","colors","sectionBackground","sectionText","shadow","SectionHeader","h2","Section","title","body","FormContainer","form","breakpoints","phone","useCurrentDate","useState","Date","date","setDate","useEffect","intervalId","setInterval","clearInterval","button","tablet","input","green","css","greenButton","red","redButton","redButtonLighter","div","Form","dispatch","useDispatch","newTaskContent","setNewTaskContent","inputRef","useRef","useSelector","createDate","dateString","toLocaleDateString","day","month","timeString","toLocaleTimeString","onSubmit","event","preventDefault","newTaskContentTrimmed","trim","content","nanoid","current","focus","FormInput","ref","autoFocus","placeholder","onChange","target","SubmitButton","ButtonContainer","Button","disabled","onClick","useQueryParameter","parameter","location","useLocation","URLSearchParams","search","get","Statement","span","Paragraph","p","centered","edit","List","ul","Item","li","hidden","active","checked","yellowButton","pen","remove","trash","LinkItem","Link","EditFormInput","EditForm","toggleTaskEdit","editTaskContent","setEditTaskContent","editDate","editTaskContentTrimmed","TasksList","query","filter","toUpperCase","includes","selectTasksByQuery","editTaskId","setTaskEditId","length","Fragment","as","to","Buttons","every","FooterContainer","footer","Footer","Search","replaceQueryParameter","history","useHistory","searchParams","delete","set","pathname","toString","useReplaceQueryParameter","TasksPage","DateParagraph","edited","TaskPage","useParams","taskId","find","getTaskById","undefined","HeaderContainer","header","HeaderSection","HeaderTitle","h1","Image","img","svgImage","Logo","src","logo","alt","Header","SwitchContainer","aside","Label","label","toggle","switch","background","translate","toggled","Switch","htmlFor","Theme","GlobalStyles","createGlobalStyle","themes","light","desktop","dark","MainWrapper","Wrapper","Container","FlexContainer","ListItem","NavLink","attrs","activeClassName","Menu","AboutPage","App","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.86c6ad8d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/checked.ecbb07b3.svg\";","module.exports = __webpack_public_path__ + \"static/media/trash.386f487d.svg\";","module.exports = __webpack_public_path__ + \"static/media/pen.0bfe9232.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.369e0d03.svg\";","export const saveItemToLocalStorage = ( key, value ) =>\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n\r\nexport const getItemFromLocalStorage = key =>\r\n    JSON.parse(localStorage.getItem(key));","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getItemFromLocalStorage } from \"../itemLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: getItemFromLocalStorage(\"tasks\") || [],\r\n        hideDone: getItemFromLocalStorage(\"hideDone\") || false,\r\n        loading: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        editTask: (state, { payload }) => {\r\n            const index = state.tasks.findIndex(task => task.id === payload.id);\r\n            state.tasks[index] = payload;\r\n        },\r\n        removeTask: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(task => task.id === payload);\r\n            tasks.splice(index, 1);\r\n        },\r\n        removeAllTasks: (state) => {\r\n            state.tasks = [];\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(task => task.id === payload)\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        toggleAllTasksDone: (state) => {\r\n            state.tasks = state.tasks.map((task) => ({ ...task, done: true }));\r\n        },\r\n        toggleHideDone: (state) => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        fetchExampleTasks: (state) => {\r\n            state.loading = !state.loading;\r\n        },\r\n        setExampleTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n            state.loading = !state.loading;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    editTask,\r\n    removeTask,\r\n    removeAllTasks,\r\n    toggleTaskDone,\r\n    toggleAllTasksDone,\r\n    toggleHideDone,\r\n    fetchExampleTasks,\r\n    setExampleTasks,\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasks = state => state.tasks;\r\nexport const selectTasksStateOnly = state => selectTasks(state).tasks;\r\n\r\nexport const getTaskById = (state, taskId) =>\r\n    selectTasksStateOnly(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasksStateOnly(state);\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    };\r\n    return tasks.filter(({ content }) => content.toUpperCase().includes(query.trim().toUpperCase()));\r\n}\r\n\r\n\r\nexport default tasksSlice.reducer;","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getItemFromLocalStorage } from \"../itemLocalStorage\";\r\n\r\nconst themeSlice = createSlice({\r\n    name: \"theme\",\r\n    initialState: {\r\n        theme: getItemFromLocalStorage(\"currentTheme\") || \"light\",\r\n    },\r\n    reducers: {\r\n        themeChange: (state) => {\r\n           state.theme = (state.theme === \"light\")\r\n           ? \"dark\"\r\n           : \"light\"\r\n        }\r\n    },\r\n},\r\n);\r\n\r\nexport const { themeChange } = themeSlice.actions;\r\nexport const selectTheme = state => state.theme;\r\nexport default themeSlice.reducer;","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/TASKER-To-Do-List-React/exampleTasks.json\");\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n\r\n};","import { takeEvery, takeLatest, call, put, delay, select } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveItemToLocalStorage } from \"../itemLocalStorage\";\r\nimport { fetchExampleTasks, selectTasks, setExampleTasks } from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setExampleTasks(exampleTasks));\r\n    } catch (error) {\r\n        yield call(alert, \"Something went wrong! Please refresh page\")\r\n    }\r\n};\r\n\r\nfunction* saveTasksToLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveItemToLocalStorage, \"tasks\", tasks.tasks)\r\n    yield call(saveItemToLocalStorage, \"hideDone\", tasks.hideDone)\r\n};\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksToLocalStorageHandler);\r\n};","import { takeEvery, call, select } from \"redux-saga/effects\";\r\nimport { selectTheme } from \"../theme/themeSlice\";\r\nimport { saveItemToLocalStorage } from \"../itemLocalStorage\";\r\n\r\nfunction* saveThemeToLocalStorageHandler() {\r\n    const theme = yield select(selectTheme);\r\n    yield call(saveItemToLocalStorage, \"currentTheme\", theme.theme)\r\n};\r\n\r\nexport function* themeSaga() {\r\n    yield takeEvery(\"*\", saveThemeToLocalStorageHandler);\r\n};","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./tasks/tasksSaga\";\r\nimport { themeSaga } from \"./theme/themeSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n        themeSaga(),\r\n    ]);\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport themeReducer from \"./features/theme/themeSlice\";\r\nimport rootSaga from \"./features/rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n        theme: themeReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\r\n\r\nconst Main = ({ children }) => (\r\n    <main>\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Main;","import styled from \"styled-components\";\r\n\r\nexport const SectionContainer = styled.section`\r\n    background-color: ${({ theme }) => theme.colors.sectionBackground};\r\n    color: ${({ theme }) => theme.colors.sectionText};\r\n    width: 100%;\r\n    padding: 10px 20px;\r\n    margin: 10px 0px;\r\n    box-shadow: 1px 1px 2px 1px ${({ theme }) => theme.colors.shadow};\r\n`;\r\nexport const SectionHeader = styled.h2`\r\n    text-transform: uppercase;\r\n    font-size: 20px;\r\n    padding-bottom: 10px;\r\n    border-bottom: 2px solid;\r\n    border-color: ${({ theme }) => theme.colors.sectionText};\r\n`;","import React from 'react';\r\nimport { SectionContainer, SectionHeader } from \"./styled\";\r\n\r\nconst Section = ({ title, body }) => (\r\n    <SectionContainer>\r\n        {\r\n            title && <SectionHeader>{title}</SectionHeader>\r\n        }\r\n        {body}\r\n    </SectionContainer>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const FormContainer = styled.form`\r\n    display: flex;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.phone}) {\r\n            flex-direction: column;\r\n    }\r\n`;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useCurrentDate = () => {\r\n\r\n    const [date, setDate] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => {\r\n            setDate(new Date());\r\n        }, 1000);\r\n\r\n        return () => {\r\n            clearInterval(intervalId);\r\n        };\r\n    }, []);\r\n\r\n    return date;\r\n};","import styled from \"styled-components\";\r\n\r\nexport default styled.button`\r\ntext-transform: uppercase;\r\ncursor: pointer;\r\nborder: none;\r\nmin-width: max-content;\r\nbackground-color: ${({ theme }) => theme.colors.sectionText};\r\ncolor: ${({ theme }) => theme.colors.sectionBackground};\r\nletter-spacing: 1px;\r\npadding: 5px 10px;\r\nmargin-left: 10px;\r\nmargin-bottom: 10px;\r\ntransition: color 0.4s, transform 0.1s, background-color 0.4s;\r\n\r\n@media (max-width: ${({ theme }) => theme.breakpoints.tablet}) {\r\n    margin-top: 10px;\r\n    margin-left: 0px;\r\n}\r\n\r\n&:hover {\r\n    background-color: ${({ theme }) => theme.colors.sectionBackground};\r\n    color: ${({ theme }) => theme.colors.sectionText};\r\n    border: 1px solid ${({ theme }) => theme.colors.sectionText};\r\n    font-weight: bold;\r\n    padding-left: 7px;\r\n}\r\n&:active {\r\n    border: 1px solid ${({ theme }) => theme.colors.sectionText};\r\n    transform: scale(0.9);\r\n}\r\n`;","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\nwidth: 100%;\r\npadding: 10px 20px;\r\nmargin-bottom: 10px;\r\n`;","import styled, { css } from \"styled-components\";\r\n\r\nexport default styled.button`\r\n    text-transform: uppercase;\r\n    text-align: center;\r\n    cursor: pointer;\r\n    border: none;\r\n    padding: 10px 20px;\r\n    color: #ffffff;\r\n    letter-spacing: 1px;\r\n    margin: 10px;\r\n    transition: color 0.4s;\r\n    transition: transform 0.1s;\r\n    transition: background-color 0.4s;\r\n\r\n    ${({ green }) => green && css`\r\n        background-color: ${({ theme }) => theme.colors.greenButton};\r\n        transition: 0.5s;\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        \r\n        &:active {\r\n            transform: scale(0.9);\r\n            filter: brightness(120%);\r\n        }\r\n        &:disabled {\r\n            background-color: #ccc;\r\n            filter: brightness(100%);\r\n            cursor: default;\r\n        }\r\n    `}\r\n\r\n    ${({ red }) => red && css`\r\n            background-color: ${({ theme }) => theme.colors.redButton};\r\n            transition: 0.3s;\r\n\r\n        &:hover {\r\n            background-color: ${({ theme }) => theme.colors.redButtonLighter};\r\n        }\r\n        \r\n        &:active {\r\n            transform: scale(0.9);\r\n        }\r\n    `}\r\n`;","import styled from \"styled-components\";\r\n\r\nexport default styled.div`\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    flex-wrap: wrap;\r\n`;","import React, { useState, useRef } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { addTask, fetchExampleTasks, selectTasks } from \"../../tasksSlice\";\r\nimport { FormContainer } from \"./styled\";\r\nimport { useCurrentDate } from \"../../useCurrentDate\";\r\nimport SubmitButton from '../SubmitButton';\r\nimport FormInput from '../FormInput';\r\nimport Button from '../Button';\r\nimport ButtonContainer from '../ButtonContainer';\r\n\r\nconst Form = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef();\r\n    const date = useCurrentDate();\r\n    const { loading } = useSelector(selectTasks);\r\n\r\n    const focus = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const createDate = (date) => {\r\n        const dateString = date.toLocaleDateString(\r\n            \"en-EN\", {\r\n            day: \"numeric\",\r\n            month: \"long\"\r\n        });\r\n        const timeString = date.toLocaleTimeString();\r\n        return `Created at ${timeString} on ${dateString}`\r\n    };\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const newTaskContentTrimmed = newTaskContent.trim();\r\n        if (!newTaskContentTrimmed) {\r\n            return\r\n        }\r\n        event.preventDefault();\r\n        dispatch(addTask({\r\n            date: createDate(date),\r\n            content: newTaskContentTrimmed,\r\n            id: nanoid(),\r\n        }));\r\n        setNewTaskContent(\"\");\r\n        focus();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FormContainer onSubmit={onFormSubmit}>\r\n                <FormInput\r\n                    ref={inputRef}\r\n                    type=\"text\"\r\n                    autoFocus\r\n                    placeholder=\"write your task here\"\r\n                    value={newTaskContent}\r\n                    onChange={({ target }) => setNewTaskContent(target.value)}\r\n                />\r\n                <SubmitButton>\r\n                    submit\r\n            </SubmitButton>\r\n            </FormContainer>\r\n            <ButtonContainer>\r\n                <Button\r\n                    green\r\n                    disabled={loading}\r\n                    onClick={() => dispatch(fetchExampleTasks())}>\r\n                    {loading\r\n                        ? \"Loading tasks...\"\r\n                        : \"Download example tasks\"}\r\n                </Button>\r\n            </ButtonContainer>\r\n        </>\r\n    );\r\n};\r\nexport default Form;","import { useLocation, useHistory } from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = (parameter) => {\r\n    const location = useLocation();\r\n    const query = (new URLSearchParams(location.search)).get(parameter);\r\n    return query;\r\n};\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const searchParams = new URLSearchParams(location.search);\r\n\r\n    return ({ key, value }) => {\r\n        if (value.trim() === \"\") {\r\n            searchParams.delete(key)\r\n        }\r\n        else {\r\n            searchParams.set(key, value);\r\n        }\r\n        history.push(`${location.pathname}?${searchParams.toString()}`)\r\n    };\r\n};","import styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport checked from \"./checked.svg\";\r\nimport trash from \"./trash.svg\";\r\nimport pen from \"./pen.svg\";\r\n\r\nexport const Statement = styled.span`\r\n    font-weight: 400;\r\n    font-size: 14px;\r\n    font-style: italic;\r\n\r\n    ${({ content }) => content && css`\r\n        &::after {\r\n            content: \"Done tasks are hidden\";\r\n        }\r\n    `}\r\n`;\r\n\r\nexport const Paragraph = styled.p`\r\n    font-weight: 400;\r\n    max-width: 100%;\r\n    text-align: justify;\r\n    flex-grow: 1;\r\n    font-size: 20px;\r\n    overflow-wrap: break-word;\r\n    word-wrap: break-word;\r\n    margin: 5px 0px;\r\n    padding-bottom: 5px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.colors.sectionText};  \r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.phone}) {\r\n        font-size: 16px;\r\n    }\r\n\r\n    ${({ centered }) => centered && css`\r\n        text-align: center;\r\n        font-style: italic;\r\n    `}\r\n    \r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n        font-style: italic;\r\n    `}\r\n\r\n    ${({ edit }) => edit && css`\r\n        text-decoration: unset;\r\n        font-style: unset;\r\n    `}\r\n`;\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    padding-left: 0px;\r\n    background-color: ${({ theme }) => theme.colors.sectionBackground};    \r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n  \r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    text-transform: uppercase;\r\n    cursor: pointer;\r\n    border: none;\r\n    min-width: 30px;\r\n    min-height: 30px;\r\n    transition: color 0.4s;\r\n    transition: transform 0.1s;\r\n    border-radius: 5px;\r\n    background-position: center;\r\n    transition: background-color 0.4s;\r\n    background-repeat: no-repeat;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.phone}) {\r\n        min-width: 25px;\r\n        min-height: 25px;\r\n    }\r\n    \r\n    ${({ active }) => active && css`\r\n        background-color: ${({ theme }) => theme.colors.greenButton};\r\n        margin-right: 15px;\r\n        transition: 0.2s;\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            transform: scale(0.85);\r\n            filter: brightness(120%);\r\n        }\r\n    `}\r\n\r\n    ${({ done }) => done && css`\r\n        background-image: url(${checked});\r\n        background-size: 75%;\r\n    `}\r\n\r\n    ${({ edit }) => edit && css`\r\n        background-color: ${({ theme }) => theme.colors.yellowButton};\r\n        background-image: url(${pen});\r\n        background-size: 75%;\r\n        margin-left: 15px;\r\n        transition: 0.2s;\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            transform: scale(0.85);\r\n            filter: brightness(120%);\r\n        }\r\n    `}\r\n    \r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.colors.redButton};\r\n        background-image: url(${trash});\r\n        background-size: 85%;\r\n        margin-left: 15px;\r\n        transition: 0.2s;\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            transform: scale(0.85);\r\n            filter: brightness(120%);\r\n        }\r\n    `}\r\n\r\n`;\r\n\r\nexport const LinkItem = styled(Link)`\r\n    text-decoration: none;\r\n    color: unset;\r\n\r\n    &:hover {\r\n        font-weight: bold;\r\n    }\r\n`;","import styled, { css } from \"styled-components\";\r\n\r\nexport const FormContainer = styled.div`\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    \r\n    @media (max-width: ${({ theme }) => theme.breakpoints.tablet}) {\r\n        flex-wrap: wrap;\r\n    }\r\n`;\r\n\r\nexport const EditFormInput = styled.input`\r\n    width: 100%;\r\n    padding: 5px 20px; \r\n    display: none;\r\n\r\n    ${({ edit }) => edit && css`\r\n        display: unset;\r\n    `}   \r\n`;","import React, { useState } from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { EditFormInput, FormContainer } from \"./styled\";\r\nimport SubmitButton from \"../../SubmitButton\"\r\nimport { editTask } from \"../../../tasksSlice\";\r\nimport { useCurrentDate } from \"../../../useCurrentDate\";\r\n\r\nconst EditForm = ({ task, toggleTaskEdit }) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [editTaskContent, setEditTaskContent] = useState(task.content);\r\n    const date = useCurrentDate();\r\n\r\n    const editDate = (date) => {\r\n        const dateString = date.toLocaleDateString(\r\n            \"en-EN\", {\r\n            day: \"numeric\",\r\n            month: \"long\"\r\n        });\r\n        const timeString = date.toLocaleTimeString();\r\n        return `(edited at ${timeString} on ${dateString})`\r\n    };\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const editTaskContentTrimmed = editTaskContent.trim();\r\n        if (editTaskContentTrimmed !== task.content) {\r\n            dispatch(editTask({\r\n                ...task,\r\n                content: editTaskContentTrimmed,\r\n                editDate: editDate(date),\r\n            }));\r\n            toggleTaskEdit();\r\n        }\r\n        else {\r\n            dispatch(editTask({\r\n                ...task,\r\n            }));\r\n            toggleTaskEdit();\r\n        };\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={onFormSubmit}>\r\n            <FormContainer>\r\n                <EditFormInput\r\n                    edit={task.id}\r\n                    value={editTaskContent}\r\n                    type=\"text\"\r\n                    autoFocus\r\n                    onChange={({ target }) => setEditTaskContent(target.value)}\r\n                />\r\n                <SubmitButton>\r\n                    submit\r\n                </SubmitButton>\r\n            </FormContainer>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default EditForm;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useQueryParameter } from \"../../queryParameters\";\r\nimport {\r\n    selectTasks,\r\n    removeTask,\r\n    toggleTaskDone,\r\n    selectTasksByQuery\r\n} from \"../../tasksSlice\";\r\nimport {\r\n    Paragraph,\r\n    List,\r\n    Item,\r\n    Statement,\r\n    Button,\r\n    LinkItem\r\n} from \"./styled\";\r\nimport EditForm from \"./EditForm\";\r\nimport searchQueryParamName from \"../../searchQueryParamName\";\r\n\r\nconst TasksList = () => {\r\n\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const dispatch = useDispatch();\r\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n    const { hideDone } = useSelector(selectTasks);\r\n    const [editTaskId, setTaskEditId] = useState(null);\r\n\r\n    const toggleTaskEdit = (task) => {\r\n        editTaskId !== task\r\n            ? setTaskEditId(task)\r\n            : setTaskEditId(null)\r\n    };\r\n\r\n    if (!tasks.length) {\r\n        return (\r\n            <Paragraph centered>\r\n                There are currently no tasks to display\r\n            </Paragraph>\r\n        )\r\n    }\r\n    else return (\r\n        <List>\r\n            <Statement\r\n                content={hideDone || \"\"}\r\n            >\r\n            </Statement>\r\n            {tasks.map((task) =>\r\n                <React.Fragment key={task.id}>\r\n                    <Item hidden={task.done && hideDone}>\r\n                        <Button\r\n                            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                            active\r\n                            done={task.done}\r\n                        />\r\n                        <Paragraph\r\n                            as=\"div\"\r\n                            done={task.done}\r\n                            edit={editTaskId}\r\n                        >\r\n\r\n                            {editTaskId === task.id\r\n                                ? <EditForm\r\n                                    task={task}\r\n                                    toggleTaskEdit={toggleTaskEdit}\r\n                                />\r\n                                : <LinkItem to={`/tasks/${task.id}`}>\r\n                                    {task.content}\r\n                                </LinkItem>}\r\n\r\n                        </Paragraph>\r\n                        <Button\r\n                            edit\r\n                            onClick={() => toggleTaskEdit(task.id)}\r\n                        />\r\n                        <Button\r\n                            onClick={() => dispatch(removeTask(task.id))}\r\n                            remove\r\n                        />\r\n                    </Item >\r\n                </React.Fragment>\r\n            )}\r\n        </List >\r\n    );\r\n};\r\n\r\nexport default TasksList;","export default \"find\";","import React from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport ButtonContainer from \"../../ButtonContainer\";\r\nimport Button from \"../../Button\"\r\nimport { toggleAllTasksDone, selectTasks, removeAllTasks, toggleHideDone } from \"../../../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        tasks.length > 0 && (\r\n            <ButtonContainer>\r\n                <Button\r\n                    onClick={() => dispatch(toggleAllTasksDone())}\r\n                    green\r\n                    disabled={tasks.every(({ done }) => done)}>\r\n                    set all as done\r\n                </Button>\r\n                <Button\r\n                    onClick={() => dispatch(toggleHideDone())}\r\n                    green\r\n                    disabled={tasks.every(({ done }) => !done)}>\r\n                    {hideDone ? \"show\" : \"hide\"} done\r\n                </Button>\r\n                <Button\r\n                    onClick={() => dispatch(removeAllTasks())}\r\n                    red>\r\n                    remove all tasks\r\n                </Button>\r\n            </ButtonContainer>\r\n        )\r\n    );\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const FooterContainer = styled.footer`\r\n    margin: 10px auto;\r\n`;","import React from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectTasks } from \"../../tasksSlice\";\r\nimport Buttons from './Buttons';\r\nimport Section from '../../../../common/Section';\r\nimport { FooterContainer } from \"./styled\";\r\n\r\nconst Footer = () => {\r\n\r\n    const { tasks } = useSelector(selectTasks);\r\n\r\n    return (\r\n        <FooterContainer>\r\n            {tasks.length > 0 && (\r\n                <Section\r\n                    body={<Buttons\r\n                        tasks={tasks}\r\n                    />}\r\n                />\r\n            )}\r\n        </FooterContainer>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React from 'react';\r\nimport FormInput from '../FormInput';\r\nimport searchQueryParamName from \"../../searchQueryParamName\";\r\nimport { useQueryParameter, useReplaceQueryParameter } from '../../queryParameters';\r\n\r\nconst Search = () => {\r\n\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n    const onInputChange = ({ target }) => {\r\n        replaceQueryParameter({\r\n            key: searchQueryParamName,\r\n            value: target.value.trim() !== \"\" ? target.value : \"\",\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <FormInput\r\n                placeholder=\"search for task here\"\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport Main from '../../../common/Main';\r\nimport Section from '../../../common/Section';\r\nimport Form from './Form';\r\nimport TasksList from './TasksList';\r\nimport Footer from './Footer';\r\nimport Search from \"./Search\";\r\n\r\nfunction TasksPage() {\r\n\r\n    return (\r\n        <>\r\n            <Main>\r\n                <Section\r\n                    title=\"add new task\"\r\n                    body={<Form />}\r\n                />\r\n                <Section\r\n                    title=\"search for task\"\r\n                    body={<Search />}\r\n                />\r\n                <Section\r\n                    title=\"task list\"\r\n                    body={<TasksList />}\r\n                />\r\n            </Main>\r\n            <Footer />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TasksPage;\r\n","\r\nimport styled, { css } from \"styled-components\";\r\n\r\nexport const DateParagraph = styled.p`\r\nfont-weight: 400;\r\nmax-width: 100%;\r\nflex-grow: 1;\r\nmargin: 5px 0px; \r\n\r\n${({ hidden }) => hidden && css`\r\n    display: none;\r\n`}\r\n\r\n${({ done }) => done && css`\r\n    text-decoration: line-through;\r\n    font-style: italic;\r\n`}\r\n\r\n@media (max-width: ${({ theme }) => theme.breakpoints.phone}) {\r\n    font-size: 12px;\r\n}\r\n`;\r\n\r\nexport const Date = styled.span`\r\n${({ edited }) => edited && css`\r\n    font-size: 14px;\r\n    font-style: italic;\r\n\r\n`}\r\n\r\n`;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Main from '../../../common/Main';\r\nimport Section from '../../../common/Section';\r\nimport { getTaskById } from \"../tasksSlice\";\r\nimport { DateParagraph, Date } from \"./styled\";\r\n\r\nfunction TaskPage() {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id));\r\n\r\n    return (\r\n        <Main>\r\n            {task !== undefined\r\n                ?\r\n                <Section\r\n                    title={`${task.content} details:`}\r\n                    body={\r\n                        <>\r\n                            <p>\r\n                                Done: {task.done ? \"Yes\" : \"No\"}\r\n                            </p>\r\n                            <DateParagraph  >\r\n                                <Date>{task.date}</Date>\r\n                                <Date edited> {task.editDate}</Date>\r\n                            </DateParagraph>\r\n                        </>\r\n                    }\r\n                />\r\n                :\r\n                <Section\r\n                    title=\"Sorry, task not found :(\"\r\n                />\r\n            }\r\n        </Main>\r\n    );\r\n};\r\n\r\nexport default TaskPage;\r\n","import { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const HeaderContainer = styled.header`\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const HeaderSection = styled.section`\r\n    display: flex;\r\n    justify-content: center;\r\n    background-color: ${({ theme }) => theme.colors.sectionBackground};\r\n    color: ${({ theme }) => theme.colors.sectionText};\r\n    width: 100%;\r\n    box-shadow: 1px 1px 2px 1px ${({ theme }) => theme.colors.shadow};\r\n`;\r\n\r\nexport const HeaderTitle = styled.h1`\r\n    text-transform: capitalize;\r\n    color: ${({ theme }) => theme.colors.sectionText};\r\n    font-size: 40px;\r\n    text-align: center;   \r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.phone}) {\r\n        font-size: 30px;\r\n    }\r\n`;\r\n\r\nexport const LinkItem = styled(Link)`\r\n    text-decoration: none;\r\n    display: flex;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Image = styled.img`\r\n    align-self: center;\r\n    margin: 10px;\r\n    width: 70px;\r\n    filter: ${({ theme }) => theme.colors.svgImage};\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.phone}) {\r\n        max-width: 60%;\r\n    }\r\n`;","import React from 'react';\r\nimport { Image } from \"./styled\";\r\nimport logo from './logo.svg';\r\n\r\nconst Logo = () => (\r\n    <Image\r\n        src={logo}\r\n        alt=\"Logotype\"\r\n    />\r\n);\r\n\r\nexport default Logo;","import React from 'react';\r\nimport { HeaderContainer, HeaderSection, HeaderTitle, LinkItem } from \"./styled\";\r\nimport Logo from \"./Logo\";\r\n\r\nconst Header = ({ title }) => (\r\n    <HeaderContainer>\r\n        <HeaderSection>\r\n            <LinkItem to=\"/\">\r\n                <Logo />\r\n                <HeaderTitle>{title}</HeaderTitle>\r\n            </LinkItem>\r\n        </HeaderSection>\r\n    </HeaderContainer>\r\n);\r\n\r\nexport default Header;","import styled, { css } from \"styled-components\";\r\n\r\nexport const SwitchContainer = styled.aside`\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    margin: 10px auto;\r\n    max-width: 800px;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n    font-weight: 700;\r\n    color: ${({ theme }) => theme.colors.sectionText};\r\n    margin-left: 10px;\r\n\r\n    ${({ toggle }) => toggle && css`\r\n        position: relative;\r\n        display: block;\r\n        padding: 5px 10px;\r\n        width: 65px;\r\n        background-color: ${({ theme }) => theme.colors.switch};\r\n        background-image: ${({ theme }) => theme.colors.switch};\r\n        transition: all 0.5s;\r\n        cursor: pointer;\r\n        box-shadow: 1px 1px 2px 1px ${({ theme }) => theme.colors.shadow};\r\n\r\n        &::after {\r\n            content: \"\";\r\n            display: block;\r\n            height: 20px;\r\n            width: 20px;\r\n            background-color: ${({ theme }) => theme.colors.background};\r\n            border: 1px solid ${({ theme }) => theme.colors.sectionText};\r\n            transition: all 0.3s;\r\n            transform: ${({ theme }) => theme.colors.translate};;\r\n        }\r\n\r\n        &:hover {\r\n            background-image: linear-gradient(to right, #2a3a41, #c4bb91);\r\n        }\r\n    `}\r\n\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    display: none;\r\n\r\n    ${({ toggled }) => toggled && css`   \r\n        +Label::after {\r\n            transform: ${({ theme }) => theme.colors.translate};;\r\n        }\r\n    `}\r\n`;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { themeChange, selectTheme } from \"../themeSlice\";\r\nimport { SwitchContainer, Label, Button } from \"./styled\";\r\n\r\nconst Switch = () => {\r\n\r\n  const { theme } = useSelector(selectTheme);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n\r\n    <SwitchContainer>\r\n      <Label htmlFor=\"switch\">\r\n        Night Mode\r\n       </Label>\r\n      <Button\r\n        id=\"switch\"\r\n        onClick={() => dispatch(themeChange(theme))}\r\n      />\r\n      <Label toggle htmlFor=\"switch\"></Label>\r\n    </SwitchContainer>\r\n\r\n  );\r\n};\r\n\r\nexport default Switch;","import React from \"react\";\r\nimport Header from \"../../common/Header\";\r\nimport Switch from \"./Switch\";\r\n\r\nconst Theme = () => (\r\n    <>\r\n        <Switch />\r\n        <Header title=\"TASKER\" />\r\n    </>\r\n);\r\n\r\n\r\nexport default Theme;\r\n","import { createGlobalStyle } from \"styled-components\"\r\nexport const GlobalStyles = createGlobalStyle`\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n  *, ::after, ::before {\r\n    box-sizing: inherit;\r\n  }\r\n  body {\r\n    background: ${({ theme }) => theme.colors.background};\r\n    font-family: \"Roboto Condensed\", sans-serif;\r\n    transition: all 0.3s linear;\r\n    margin: 10px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.phone}) {\r\n        font-size: 15px;\r\n    }\r\n  }\r\n  `","export const themes = {\r\n    light: {\r\n        colors: {\r\n            background: \"#c4bb91\",\r\n            sectionBackground: \"#fff\",\r\n            sectionText: \"#141414\",\r\n            shadow: \"#555\",\r\n            greenButton: \"rgb(0, 172, 29)\",\r\n            redButton: \"rgb(172, 0, 0)\",\r\n            yellowButton: \"rgb(227, 204, 52)\",\r\n            switch: \"hsl(0, 0%, 100%)\",\r\n            svgImage: \"brightness(100%) invert(0%)\",\r\n            translate: \"translatex(130%)\",\r\n        },\r\n\r\n        breakpoints: {\r\n            phone: \"375px\",\r\n            tablet: \"768px\",\r\n            desktop: \"1200px\",\r\n\r\n        },\r\n    },\r\n\r\n    dark: {\r\n        colors: {\r\n            background: \"#1a1a1a\",\r\n            sectionBackground: \"#2a3a41\",\r\n            sectionText: \"rgb(255, 255, 255)\",\r\n            shadow: \"rgb(156, 156, 156)\",\r\n            greenButton: \"rgb(0, 172, 29)\",\r\n            redButton: \"rgb(172, 0, 0)\",\r\n            yellowButton: \"rgb(227, 204, 52)\",\r\n            switch: \"#2a3a41\",\r\n            svgImage: \"brightness(0%) invert(100%)\",\r\n            translate: \"translatex(0%)\",\r\n        },\r\n\r\n        breakpoints: {\r\n            phone: \"375px\",\r\n            tablet: \"768px\",\r\n            desktop: \"1200px\",\r\n        },\r\n    },\r\n};","import styled from \"styled-components\";\r\n\r\nexport const MainWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-height: 100vh;\r\n`;","import React from 'react';\r\nimport { MainWrapper } from \"./styled\";\r\n\r\nconst Wrapper = ({ children }) => (\r\n    <MainWrapper>\r\n        {children}\r\n    </MainWrapper>\r\n);\r\n\r\nexport default Wrapper;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n        max-width: 800px;\r\n        width: 100%;\r\n    `;","import React from 'react';\r\nimport { Container } from \"./styled\";\r\n\r\nconst FlexContainer = ({ children }) => (\r\n    <Container>\r\n        {children}\r\n    </Container>\r\n\r\n);\r\n\r\nexport default FlexContainer;","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst activeClassName = \"active\";\r\n\r\nexport const List = styled.ul`\r\n    padding: 0;\r\n    list-style: none;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    font-size: 18px;\r\n    text-transform: uppercase;\r\n    letter-spacing: 1px;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n    padding-top: 10px;\r\n`;\r\n\r\nexport const LinkItem = styled(NavLink).attrs(() => ({\r\n    activeClassName\r\n}))`\r\n    padding: 10px 20px;\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.colors.sectionText};\r\n    transition: color 0.4s, transform 0.1s, background-color 0.4s;\r\n\r\n    &:hover {\r\n        cursor: pointer;\r\n        background-color: ${({ theme }) => theme.colors.sectionBackground};\r\n        color: ${({ theme }) => theme.colors.sectionText};\r\n        border: 1px solid ${({ theme }) => theme.colors.sectionText};\r\n        margin: 0px -1px;\r\n    }\r\n\r\n    &:active {\r\n        border: 1px solid black;\r\n    }\r\n\r\n    &.${activeClassName} {\r\n        background-color: ${({ theme }) => theme.colors.sectionText};\r\n        color: ${({ theme }) => theme.colors.sectionBackground};\r\n\r\n        &:hover {\r\n            cursor: pointer;\r\n            background-color: ${({ theme }) => theme.colors.sectionBackground};\r\n            color: ${({ theme }) => theme.colors.sectionText};\r\n            border: 1px solid ${({ theme }) => theme.colors.sectionText};\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport Section from '../../common/Section';\r\nimport { List, ListItem, LinkItem } from './styled';\r\n\r\nconst Menu = () => {\r\n  return (\r\n    <Section\r\n      title={\r\n        \"Menu\"\r\n      }\r\n      body={\r\n        <nav>\r\n          <List>\r\n            <ListItem>\r\n              <LinkItem to=\"/tasks\">Tasks list</LinkItem>\r\n            </ListItem>\r\n            <ListItem>\r\n            <LinkItem to=\"/about\">About</LinkItem>\r\n            </ListItem>\r\n          </List>\r\n        </nav>\r\n      } />\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default Menu;\r\n","import React from \"react\";\r\nimport Main from '../../../common/Main';\r\nimport Section from '../../../common/Section';\r\n\r\nfunction AboutPage() {\r\n\r\n    return (\r\n        <>\r\n            <Main>\r\n                <Section\r\n                    title=\"About\"\r\n                    body={\r\n                        <main>\r\n                            <h3>DESCRIPTION</h3>\r\n                            <p>\r\n                                To Do List app created during <strong>\"Become A Front End Developer\"</strong> bootcamp provided by <em>Youcode Academy</em>.\r\n                                It helps in scheduling tasks, allowing you to add, check, edit and delete them.\r\n                                Tasks will be saved in local storage memory of your browser.\r\n                            </p>\r\n                            <h4>TECHNOLOGIES USED:</h4>\r\n                            <ul>\r\n                                <li>React</li>\r\n                                <li>creat-react-app</li>\r\n                                <li>Redux with react-redux</li>\r\n                                <li>Redux-Saga,</li>\r\n                                <li>React-Router,</li>\r\n                                <li>HTML</li>\r\n                                <li>CSS</li>\r\n                                <li>JavaScript ES6+</li>\r\n                                <li>Styled Components</li>\r\n                                <li>npm</li>\r\n                                <li>localstorage</li>\r\n                            </ul>\r\n                            <h4> METHODOLOGIES USED:</h4>\r\n                            <ul>\r\n                                <li>Hooks</li>\r\n                                <li>Custom Hooks</li>\r\n                                <li>JSX</li>\r\n                            </ul>\r\n                        </main>\r\n                    }\r\n                />\r\n            </Main>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AboutPage;\r\n","import React from \"react\";\r\nimport TasksPage from \"./features/tasks/TasksPage\";\r\nimport TaskPage from \"./features/tasks/TaskPage\";\r\nimport Theme from \"./features/theme/Theme\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { HashRouter, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport { selectTheme } from \"./features/theme/themeSlice\";\r\nimport { GlobalStyles } from \"./features/theme/GlobalStyles\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { themes } from \"./../App/features/theme/themes\";\r\nimport Wrapper from './common/Wrapper';\r\nimport FlexContainer from './common/FlexContainer';\r\nimport Menu from \"./common/Menu\";\r\nimport AboutPage from \"./features/about/AboutPage\";\r\n\r\nfunction App() {\r\n\r\n  const { theme } = useSelector(selectTheme);\r\n\r\n  return (\r\n    <ThemeProvider\r\n      theme={theme === \"light\" ? themes.light : themes.dark\r\n      }>\r\n      <GlobalStyles />\r\n      <HashRouter>\r\n        <Wrapper>\r\n          <FlexContainer>\r\n            <Theme />\r\n            <Menu />\r\n            <Switch>\r\n              <Route path=\"/tasks/:id\">\r\n                <TaskPage />\r\n              </Route>\r\n              <Route path=\"/tasks\">\r\n                <TasksPage />\r\n              </Route>\r\n              <Route path=\"/about\">\r\n                <AboutPage />\r\n              </Route>\r\n              <Route path=\"/\">\r\n                <Redirect to=\"/tasks\" />\r\n              </Route>\r\n            </Switch>\r\n          </FlexContainer>\r\n        </Wrapper>\r\n      </HashRouter>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from \"./App/store\";\r\nimport App from './App/App';\r\nimport * as serviceWorker from './App/serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}