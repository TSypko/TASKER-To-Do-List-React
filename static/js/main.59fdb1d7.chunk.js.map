{"version":3,"sources":["logo.svg","Switch/index.js","Logo/index.js","Header/index.js","Main/index.js","Section/index.js","Form/index.js","Tasks/index.js","Buttons/index.js","Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Switch","useState","theme","setTheme","className","htmlFor","type","id","value","onChange","target","checked","document","body","setAttribute","removeAttribute","Logo","src","logo","alt","Header","title","Main","children","Section","sectionType","Form","addTask","newTaskContent","setNewTaskContent","onSubmit","event","trim","preventDefault","autoFocus","placeholder","Tasks","tasks","hideDone","removeTask","toggleTaskDone","length","map","task","key","done","onClick","content","Buttons","toggleHideDone","toggleHide","setAllDone","removeAllTasks","disabled","every","undefined","Footer","App","setTasks","setHideDone","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.59fdb1d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.808985cb.svg\";","import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Switch = () => {\r\n  const [theme, setTheme] = useState(false)\r\n  const onThemeChange = ({ target }) => setTheme(() => {\r\n    if (target.checked) {\r\n      document.body.setAttribute(\"data-theme\", \"night\");\r\n    } else {\r\n      document.body.removeAttribute(\"data-theme\");\r\n    }\r\n  }\r\n  );\r\n  return (\r\n    <aside className=\"switch__container\">\r\n      <label htmlFor=\"switch\" className=\"switch__label\">\r\n        Night Mode\r\n    </label>\r\n      <input\r\n        className=\"switch\"\r\n        type=\"checkbox\"\r\n        id=\"switch\"\r\n        value={theme}\r\n        onChange={onThemeChange}\r\n      />\r\n      <label className=\"switch__toggle\" htmlFor=\"switch\"></label>\r\n    </aside>\r\n  )\r\n};\r\n\r\nexport default Switch;","import React from 'react';\r\nimport logo from '../logo.svg';\r\nimport \"./style.css\";\r\n\r\nconst Logo = () => (\r\n    <img\r\n        src={logo}\r\n        alt=\"Logotype\"\r\n        className=\"logo\"\r\n    />\r\n);\r\n\r\nexport default Logo;","import React from 'react';\r\nimport \"./style.css\";\r\nimport Logo from \"../Logo\";\r\n\r\nconst Header = ({ body, title }) => (\r\n    <header className=\"header\">\r\n        <section className=\"header__section\">\r\n           <Logo />\r\n            <h1 className=\"header__title\">{title}</h1>\r\n        </section>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Main = ({children}) => (\r\n    <main className=\"main\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Main;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Section = ({ title, body, sectionType }) => (\r\n    <section className={`section${sectionType ? ` ${sectionType}` : \"\"}`}>\r\n        <h2 className=\"section__header\">{title}</h2>\r\n        {body}\r\n    </section>\r\n)\r\n\r\nexport default Section;","import React, { useState } from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addTask }) => {\r\n\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        if (newTaskContent.trim() === \"\") {\r\n            event.preventDefault();\r\n            return\r\n        }\r\n        event.preventDefault();\r\n        addTask(newTaskContent.trim());\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={onFormSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                className=\"form__input\"\r\n                autoFocus\r\n                placeholder=\"write your task here\"\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <button className=\"form__button\">\r\n                submit\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => {\r\n    if (!tasks.length) {\r\n        return (\r\n            <p className=\"tasks__paragraph tasks__paragraph--centered\">\r\n                There are currently no tasks to display\r\n            </p>\r\n        )\r\n    }\r\n    else return (\r\n        <ul className=\"tasks__list\">\r\n            {tasks.map((task) =>\r\n                <li key={task.id} className={`tasks__item ${\r\n                    task.done && hideDone ? \"tasks__item--hidden\" : \"\"\r\n                    }`}>\r\n                    <button onClick={() => toggleTaskDone(task.id)}\r\n                        className={`tasks__button tasks__button--doneButton${\r\n                            task.done ? \" tasks__button--doneButtonToggled\" : \"\"\r\n                            }`}></button>\r\n                    <p className={`tasks__paragraph ${\r\n                        task.done ? \"tasks__paragraph--done\" : \"\"\r\n                        }`}>\r\n                        {task.content}\r\n                    </p>\r\n                    <button onClick={() => removeTask(task.id)}\r\n                        className=\"tasks__button tasks__button--deleteButton\"></button>\r\n                </li >\r\n            )}\r\n        </ul >\r\n    )\r\n};\r\n\r\nexport default Tasks;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHide: toggleHideDone, setAllDone, removeAllTasks }) => (\r\n    tasks.length > 0 && (\r\n        <>\r\n            <button\r\n                onClick={setAllDone}\r\n                className=\"button button--doneAllButton\"\r\n                disabled={tasks.every(({ done }) => done)}>\r\n                set all as done\r\n                </button>\r\n            <button\r\n                onClick={toggleHideDone}\r\n                className=\"button button--hideDoneButton\"\r\n                disabled={tasks.every(({ done }) => !done || undefined)}>\r\n                {hideDone ? \"show\" : \"hide\"}\r\n                 done\r\n                 </button>\r\n            <button\r\n                onClick={removeAllTasks}\r\n                className=\"button button--removeAllButton\">\r\n                remove all tasks\r\n                 </button>\r\n        </>\r\n    )\r\n);\r\n\r\nexport default Buttons;","import React from 'react';\r\nimport Buttons from '../Buttons';\r\nimport Section from '../Section';\r\nimport \"./style.css\";\r\n\r\nconst Footer = ({ tasks, hideDone, toggleHide, setAllDone, removeAllTasks }) => (\r\n    <footer className=\"footer\">\r\n        {tasks.length > 0 && (\r\n            <Section\r\n                sectionType={\"section--footer\"}\r\n                body={<Buttons\r\n                    tasks={tasks}\r\n                    hideDone={hideDone}\r\n                    toggleHide={toggleHide}\r\n                    setAllDone={setAllDone}\r\n                    removeAllTasks={removeAllTasks}\r\n                />}\r\n            />\r\n        )}\r\n    </footer>\r\n)\r\n\r\nexport default Footer;","import React, { useState } from \"react\";\nimport Switch from './Switch';\nimport Header from './Header';\nimport Main from './Main';\nimport Section from './Section';\nimport Form from './Form';\nimport Tasks from './Tasks';\nimport Footer from './Footer';\n\nfunction App() {\n\n  const [tasks, setTasks] = useState([]);\n\n  const [hideDone, setHideDone] = useState(false);\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const addTask = (newTaskContent) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n        content: newTaskContent,\n        done: false\n      }\n    ]);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      };\n      return task;\n    }))\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({ ...task, done: true })));\n  };\n\n  const removeAllTasks = () => {\n    setTasks([]);\n  };\n\n\n  return (\n    <>\n      <Switch />\n      <Header title=\"TASKER\" />\n      <Main>\n        <Section\n          title=\"add new task\"\n          body={\n            <Form addTask={addTask} />\n          }\n        />\n        <Section\n          title=\"task list\"\n          body={\n            <Tasks\n              tasks={tasks}\n              hideDone={hideDone}\n              removeTask={removeTask}\n              toggleTaskDone={toggleTaskDone}\n            />\n          }\n        />\n      </Main>\n      <Footer\n        tasks={tasks}\n        hideDone={hideDone}\n        toggleHideDone={toggleHideDone}\n        setAllDone={setAllDone}\n        removeAllTasks={removeAllTasks}\n      />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}